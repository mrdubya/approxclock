#! /usr/local/bin/python
#
# Copyright (c) 2008-2014 Mike Williams <mrmrdubya@gmail.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

"""Display the approximate time.

usage: atime [-h] [-f mins] [-r mins]

-f how many minutes fast the clock is.  Default is 0.
-h display this help
-r clock resolution - 5, 10, 15, or 20 minutes. Default is 5.

"""

import getopt
import re
import sys

import approxclock

# Utility product information
__product__ = 'Approximate Time'
__copyright__ = 'Copyright 2008-2014 Michael R. Williams. All rights reserved.'
version_info = (0, 1, 0, 'alpha', 0)
__version__ = '%d.%d.%d' % version_info[:3]
if version_info[3] != 'final':
    __version__ += ' %s.%d' % version_info[3:]

__description__ = '%s %s.\n%s' % (__product__, __version__, __copyright__)

USAGE = re.search('^usage:.*', __doc__, re.MULTILINE).group()


def usage(mesg):
    sys.exit('%s\n%s' % (mesg, USAGE))

try:
    opts, pargs = getopt.getopt(sys.argv[1:], "f:hr:")
except getopt.GetoptError, e:
    usage(e)

# Process options
resolution = 5
fast = 0
for option, value in opts:
    if option == '-h':
        print '%s\n%s' % (__description__, __doc__)
        sys.exit()

    elif option == '-f':  # Minutes fast
        fast = int(value)

    elif option == '-r':  # Clock resolution
        resolution = int(value)
        if resolution % 5 != 0 or resolution > 20:
            usage('Invalid clock resolution %d.' % resolution)

print approxclock.ApproxClock(fast=fast, resolution=resolution)

# eof
